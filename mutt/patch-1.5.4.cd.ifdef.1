diff -pruN mutt-1.5.4.orig/doc/manual.sgml.head mutt-1.5.4/doc/manual.sgml.head
--- mutt-1.5.4.orig/doc/manual.sgml.head	2003-03-04 08:49:49.000000000 +0100
+++ mutt-1.5.4/doc/manual.sgml.head	2003-07-22 20:14:47.000000000 +0200
@@ -1539,6 +1539,19 @@ If the filename ends with a vertical bar
 considered to be an executable program from which to read input (eg.
 <tt/source ~/bin/myscript|/).
 
+<sect1>Configuring features conditionnaly<label id="ifdef">
+<p>
+Usage: <tt/ifdef/ <em/item/ <em/command/
+
+This command allows to test if a feature has been compiled in, before
+actually executing the command. Item can be either the name of a
+function or a variable.
+
+Example:
+<tscreen><verb>
+ifdef imap_keepalive 'source ~/.mutt/imap_setup'
+</verb></tscreen>
+
 <sect1>Removing hooks<label id="unhook">
 <p>
 Usage: <tt/unhook/ &lsqb; * | <em/hook-type/ &rsqb;
diff -pruN mutt-1.5.4.orig/init.c mutt-1.5.4/init.c
--- mutt-1.5.4.orig/init.c	2003-03-04 08:49:48.000000000 +0100
+++ mutt-1.5.4/init.c	2003-07-22 20:14:47.000000000 +0200
@@ -349,6 +349,52 @@ static void remove_from_list (LIST **l, 
   }
 }
 
+static int parse_ifdef (BUFFER *tmp, BUFFER *s, unsigned long data, BUFFER *err)
+{
+  int i, j, res = 0;
+  BUFFER token;
+
+  memset (&token, 0, sizeof (token));
+  mutt_extract_token (tmp, s, 0);
+
+  /* is the item defined as a variable or a function? */
+  if (!(res = (mutt_option_index (tmp->data) != -1)))
+    for (i = 0; !res && i < MENU_MAX; i++)
+    {
+      struct binding_t *b = km_get_table (Menus[i].value);
+
+      if (!b)
+	continue;
+
+      for (j = 0; b[j].name; j++)
+	if (!ascii_strncasecmp (tmp->data, b[j].name, mutt_strlen (tmp->data))
+	      && (mutt_strlen (b[j].name) == mutt_strlen (tmp->data)))
+	{
+	  res = 1;
+	  break;
+	}
+    }
+
+  if (!MoreArgs (s))
+  {
+    snprintf (err->data, err->dsize, _("ifdef: too few arguments"));
+    return (-1);
+  }
+  mutt_extract_token (tmp, s, M_TOKEN_SPACE);
+
+  if (res)
+  {
+    if (mutt_parse_rc_line (tmp->data, &token, err) == -1)
+    {
+      mutt_error ("Erreur: %s", err->data);
+      FREE (&token.data);
+      return (-1);
+    }
+    FREE (&token.data);
+  }
+  return 0;
+}
+
 static int parse_unignore (BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
 {
   do
diff -pruN mutt-1.5.4.orig/init.h mutt-1.5.4/init.h
--- mutt-1.5.4.orig/init.h	2003-03-04 10:28:12.000000000 +0100
+++ mutt-1.5.4/init.h	2003-07-22 20:14:47.000000000 +0200
@@ -2707,6 +2707,7 @@ static int parse_unlist (BUFFER *, BUFFE
 static int parse_unlists (BUFFER *, BUFFER *, unsigned long, BUFFER *);
 static int parse_alias (BUFFER *, BUFFER *, unsigned long, BUFFER *);
 static int parse_unalias (BUFFER *, BUFFER *, unsigned long, BUFFER *);
+static int parse_ifdef (BUFFER *, BUFFER *, unsigned long, BUFFER *);
 static int parse_ignore (BUFFER *, BUFFER *, unsigned long, BUFFER *);
 static int parse_unignore (BUFFER *, BUFFER *, unsigned long, BUFFER *);
 static int parse_source (BUFFER *, BUFFER *, unsigned long, BUFFER *);
@@ -2741,6 +2742,7 @@ struct command_t Commands[] = {
   { "folder-hook",	mutt_parse_hook,	M_FOLDERHOOK },
   { "hdr_order",	parse_list,		UL &HeaderOrderList },
 #ifdef HAVE_ICONV
+  { "ifdef",		parse_ifdef,		0 },
   { "iconv-hook",	mutt_parse_hook,	M_ICONVHOOK }, 
 #endif
   { "ignore",		parse_ignore,		0 },
diff -pruN mutt-1.5.4.orig/PATCHES mutt-1.5.4/PATCHES
--- mutt-1.5.4.orig/PATCHES	2003-03-19 22:33:37.000000000 +0100
+++ mutt-1.5.4/PATCHES	2003-07-22 20:14:47.000000000 +0200
@@ -1,0 +1 @@
+patch-1.5.4.cd.ifdef.1
