/* confdefs.h.  */

#define PACKAGE_NAME ""
#define PACKAGE_TARNAME ""
#define PACKAGE_VERSION ""
#define PACKAGE_STRING ""
#define PACKAGE_BUGREPORT ""
#define PACKAGE "pwman"
#define VERSION "0.3.9"
#define STDC_HEADERS 1
#define HAVE_SYS_TYPES_H 1
#define HAVE_SYS_STAT_H 1
#define HAVE_STDLIB_H 1
#define HAVE_STRING_H 1
#define HAVE_MEMORY_H 1
#define HAVE_STRINGS_H 1
#define HAVE_INTTYPES_H 1
#define HAVE_STDINT_H 1
#define HAVE_UNISTD_H 1
#define HAVE_UNISTD_H 1
#define HAVE_LOCALE_H 1
#define HAVE_TERMIOS_H 1
#define HAVE_LINUX_TERMIOS_H 1
#define HAVE_SYS_IOCTL_H 1
#define HAVE_STRING_H 1
/* end confdefs.h.  */
/* Define drand48 to an innocuous variant, in case <limits.h> declares drand48.
   For example, HP-UX 11i <limits.h> declares gettimeofday.  */
#define drand48 innocuous_drand48

/* System header to define __stub macros and hopefully few prototypes,
    which can conflict with char drand48 (); below.
    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
    <limits.h> exists even on freestanding compilers.  */

#ifdef __STDC__
# include <limits.h>
#else
# include <assert.h>
#endif

#undef drand48

/* Override any gcc2 internal prototype to avoid an error.  */
#ifdef __cplusplus
extern "C"
{
#endif
/* We use char because int might match the return type of a gcc2
   builtin and then its argument prototype would still apply.  */
char drand48 ();
/* The GNU C library defines this for functions which it implements
    to always fail with ENOSYS.  Some functions are actually named
    something starting with __ and the normal name is an alias.  */
#if defined (__stub_drand48) || defined (__stub___drand48)
choke me
#else
char (*f) () = drand48;
#endif
#ifdef __cplusplus
}
#endif

int
main ()
{
return f != drand48;
  ;
  return 0;
}
