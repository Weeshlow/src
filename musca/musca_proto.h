void say(const char *fmt, ...);
ucell get_color(head *h, const char *name);
int error_callback(Display *dpy, XErrorEvent *ee);
ucell modifier_names_to_mask(char *names);
struct binding* find_binding(ucell mod, KeyCode key);
ubyte create_binding(char *pattern, char *command);
ubyte remove_binding(char *pattern);
void window_property(Window win, Atom prop, char *pad, ucell plen);
void window_name(Window win, char *pad);
void window_class(Window win, char *pad);
ubyte is_unmanaged_class(char *name);
ubyte is_unmanaged_window(Window win);
ubyte window_on_screen(head *hd, Window win, XWindowAttributes *attr, int *x, int *y, int *w, int *h);
head* head_by_screen(Screen *s);
client* client_by_window(Window w);
client* client_by_resize_window(Window w);
client* client_hidden(group *t);
frame* is_frame_background(Window win);
ubyte is_valid_client(client *c);
void client_configure(client *c, XConfigureRequestEvent *cr);
void client_display(client *c, frame *target);
void client_unfocus(client *c);
void client_focus(client *c, frame *target);
void client_hide(client *c);
void client_remove(client *c);
void client_push(group *t, client *c);
void client_pop(client *c);
client* client_create(group *t, frame *f, Window win);
void client_destroy(client *c);
void client_regroup(group *g, client *c);
void frame_push(group *t, frame *f);
void frame_pop(frame *f);
ucell frame_border_focus(frame *f);
ucell frame_border_unfocus(frame *f);
frame* frame_create(group *t, int x, int y, int w, int h);
void frame_destroy(frame *f);
frame* frame_available(frame *f);
void frame_display_hidden(frame *f);
void frame_focus_hidden(frame *f);
void frames_display_hidden(group *t);
void frame_update(frame *f);
void frame_unfocus(frame *f);
void frame_focus(frame *f);
void frame_hide(frame *f);
void frame_hsplit(dcell ratio);
void frame_hsplit_half();
void frame_vsplit(dcell ratio);
void frame_vsplit_half();
void frame_split(ubyte direction, dcell ratio);
ubyte frame_borders(frame *s, int x, int y, int w, int h);
struct frame_match* frames_bordering(group *t, int x, int y, int w, int h);
ubyte frame_in_set(frame **set, frame *f);
void frames_fill_gap_except(group *t, frame **exceptions, int x, int y, int w, int h, ubyte mode);
void frames_fill_gap(group *t, int x, int y, int w, int h, ubyte mode);
ubyte nearest_side(int x, int y, int a, int b, int c, int d);
ubyte frame_covers(frame *s, int x, int y, int width, int height);
void frames_make_gap_except(group *t, frame **exceptions, int x, int y, int width, int height);
void frames_make_gap(group *t, int x, int y, int w, int h);
frame* frame_sibling(frame *f, ubyte axis, ubyte side);
frame** frame_siblings(frame *f, ubyte axis);
ubyte frame_siblings_growable(frame **siblings, ubyte axis, ucell size);
void frame_remove();
ubyte frame_shrink(ubyte direction, ubyte adapt, ucell size);
ubyte frame_grow(ubyte direction, ubyte adapt, ucell size);
void frame_only();
char frames_overlap_y(frame *a, frame *b);
char frames_overlap_x(frame *a, frame *b);
frame* frame_relative(frame *f, ubyte side);
void frame_left();
void frame_right();
void frame_up();
void frame_down();
void frame_kill_client();
void frame_cycle_client();
void frame_swap(ubyte direction);
void frame_dedicate();
void frame_catchall();
void group_push(head *h, group *t);
void group_pop(group *t);
group* group_create(head *head, char *name, int x, int y, int w, int h);
void group_destroy(group *t);
void group_unfocus(group *t);
void group_hide(group *t);
void group_focus(group *t);
void group_next();
void group_prev();
void group_resize(group *ta, int l, int r, int t, int b);
group* group_by_name(head *h, char *name);
void group_raise(char *name);
char* group_dump(group *g);
void group_load(group *g, char *dump);
void group_track(group *g);
void group_undo();
void group_stack();
void head_focus(head *h);
void head_next();
void menu(char *cmd, char *after);
void shutdown();
dcell parse_size(char *cmd, regmatch_t *subs, ucell index, ucell limit);
void com_frame_split(char *cmd, regmatch_t *subs);
void com_frame_size(char *cmd, regmatch_t *subs);
void com_frame_resize(char *cmd, regmatch_t *subs);
void com_group_pad(char *cmd, regmatch_t *subs);
void com_group_add(char *cmd, regmatch_t *subs);
void com_group_drop(char *cmd, regmatch_t *subs);
void com_group_name(char *cmd, regmatch_t *subs);
void com_window_to_group(char *cmd, regmatch_t *subs);
void com_window_raise(char *cmd, regmatch_t *subs);
void com_frame_swap(char *cmd, regmatch_t *subs);
void com_group_dump(char *cmd, regmatch_t *subs);
void com_group_load(char *cmd, regmatch_t *subs);
void com_frame_remove(char *cmd, regmatch_t *subs);
void com_frame_kill(char *cmd, regmatch_t *subs);
void com_frame_cycle(char *cmd, regmatch_t *subs);
void com_frame_only(char *cmd, regmatch_t *subs);
void com_group_undo(char *cmd, regmatch_t *subs);
ubyte parse_flag(char *cmd, regmatch_t *subs, ucell index, ubyte current);
void com_frame_dedicate(char *cmd, regmatch_t *subs);
void com_frame_catchall(char *cmd, regmatch_t *subs);
void com_frame_focus(char *cmd, regmatch_t *subs);
void com_group_use(char *cmd, regmatch_t *subs);
void com_exec(char *cmd, regmatch_t *subs);
void com_manage(char *cmd, regmatch_t *subs);
void com_screen_switch(char *cmd, regmatch_t *subs);
void com_group_stack(char *cmd, regmatch_t *subs);
void com_set(char *cmd, regmatch_t *subs);
void com_bind(char *cmd, regmatch_t *subs);
void com_switch(char *cmd, regmatch_t *subs);
void com_command(char *cmd, regmatch_t *subs);
void com_shell(char *cmd, regmatch_t *subs);
void com_quit(char *cmd, regmatch_t *subs);
void musca_command(char *cmd);
void catch_exit(int sig);
void exec_cmd(char *cmd);
void window_switch();
void group_switch();
void manage(Window win, XWindowAttributes *attr);
winstate* quiz_window(Window win);
void createnotify(XEvent *ev);
void configurerequest(XEvent *ev);
void configurenotify(XEvent *ev);
void maprequest(XEvent *ev);
void mapnotify(XEvent *ev);
void unmapnotify(XEvent *ev);
void mappingnotify(XEvent *ev);
void destroynotify(XEvent *ev);
void keypress(XEvent *ev);
void buttonpress(XEvent *ev);
void buttonrelease(XEvent *ev);
void motionnotify(XEvent *ev);
void propertynotify(XEvent *ev);
ubyte insert_command(char* cmd);
void find_clients(head *h);
void ungrab_stuff();
void grab_stuff();
void setup(int argc, char **argv);
void process_event(XEvent *ev);
int main(int argc, char **argv);
