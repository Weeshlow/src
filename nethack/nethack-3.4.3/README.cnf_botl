
Patch: Configurable Statuslines v2.1
---

 Allows the user to change what is shown on the bottom statuslines,
 by setting the options in the config file.


 Here's an example of how the default statuslines would look:
 
OPTIONS=statline1:"%-.10a the %-12b St:%c Dx:%d Co:%e In:%f Wi:%g Ch:%h %i %y"
OPTIONS=statline2:"%-7k %$:%-4l HP:%n(%m) Pw:%p(%o) AC:%-2q %t %v %w"

 and here's alternative ones:

OPTIONS=statline1:"%-.10a the %b S:%c D:%d C:%e I:%f W:%g C:%h %.3i %R %Z"
OPTIONS=statline2:"%-7k %$:%-4l HP:%n(%m) Pw:%p(%o) AC:%-2q %t %v %S%T%U%V%W%X%Y"
 or
OPTIONS=statline2:'%-7k %$:%-2l HP:%{s:n;m}%n%{c}(%m) Pw:%{s:p;o}%p%{c}(%o) AC:%-2q %t %v %w'


Variables and commands begin with percent sign ('%'), everything else before
and after is shown normally.

Variable format:

  %[-][x][.y]z
  
  -	field output is left justified
  x	field length
  .y	number of characters to output on the field
  z	one of the following:

	  % = "%"
	  $ = symbol for gold

	  a = name
	  b = rank

	  c = strength
	  d = dexterity
	  e = constitution
	  f = intelligence
	  g = wisdom
	  h = charisma

	  i = alignment

	  j = dungeon depth (number)
	  k = dungeon name  ("Dlvl:%j", varies depending on the branch)

	  l = gold

	  m = max hit points
	  n = current hit points

	  o = max power
	  p = current power

	  q = armor class

	  r = experience level (or hit dice if polymorphed)
	  s = experience points (empty string if !showexp)
	  t = "Exp:%r"  OR  "Xp:%r/%s"   depending on showexp-option,
	      		OR  "HD:%r"      if polymorphed

	  u = time   (or empty string if time-option is off)
	  v = "T:%u" (or empty string if time-option if off)

	  w = all status flags (blind, ill, foodpois, ...)

	  x = score   (if compiled with SCORE_ON_BOTL, else empty string)
	  y = "S:%x"  (if compiled with SCORE_ON_BOTL, else empty string)

	  R = status: encumbrance level
	  S = status: slime
	  T = status: hallu
	  U = status: stun
	  V = status: blind
	  W = status: ill
	  X = status: foodpois
	  Y = status: conf
	  Z = status: hunger level


Command format:

  %{x[:y[;y]]}
  
  y	optional parameters for the command, separated with ';'
  x	command identifier character, one of the following:
  
	  c = Set color and attribute.
	      Parameters: 0, 1, or 2.
	      First parameter is color, the second parameter.
	      If parameters are omitted, the color and attribute are
	       reset to defaults, if only one parameter is given, it's
	       assumed to be a color.
	      Valid values for color are black, red, green, brown, blue,
	       magenta, cyan, gray, orange, lightgreen, yellow, lightblue,
	       lightmagenta, lightcyan and white.
	      Valid values for attributes are none, bold, dim, underline,
	       blink, and inverse.
	      You can also use numbers instead of named colors or attributes,
	      eg. 0 is black, 1 is red, 2 is green, and so on.
	      Note that the terminal is free to interpret the colors and
	      attributes however it wants.
	      Examples: %{c}
			%{c:green}
			%{c:blue;bold}
			%{c:2;1}

	  s = Use color "slide".
	      Changes the printing color according to the parameters.
	      The smaller the first parameter is when compared to the
	      second parameter, the more eye-catching colors are used.
	      (The colors are orange, yellow, white and no color)
	      
	      Parameters: 2.
	      First is the current value, Second is the maximum value.
	      You can either use constant positive integer values, or
	      variable characters without the '%'.
	      Examples: HP:%{s:n;m}%n%{c}(%m)
	                Pw:%{s:p;o}%p%{c}(%o)





For example, if the character's name is "Abcdefg":

options str      status line
"%10a"       =>  "   Abcdefg"
"%-10a"      =>  "Abcdefg   "
"%.3a"       =>  "Abc"
"%10.3a"     =>  "       Abc"
"%-10.3a"    =>  "Abc       "

"%{c:green;bold}%a"  => Prints the player's name with green and bold.
"HP:%{s:n;m}%n%{c}(%m)" => Prints current hitpoints with different colors,
                           depending on how much you have compared to the
			   maximum hitpoints.


Affected files:
---
 src/save.c
 src/botl.c
 src/options.c
 


Todo:
---
 -still only works with TTY
 -win/tty/wintty.c:tty_putstr() changes the string, but it might not
  be in the same 'format' as it expects. (eg. it removes chars before 
  'St:')
 
 v2.1
 -updated to use 3.4.1 codebase
 -compile time option CONF_BOTL
 
 v2.0
 -cleaned up the code a bit
 -you can now use colors and attributes

 v1.1
 -uses Nethack 3.4.0 codebase
 -major code cleanup

 v1.0
 -initial release


---
 Pasi Kallinen
 pkalli@cs.joensuu.fi


 You're free to (ab)use the code in any way you wish.
